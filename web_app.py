import streamlit as st
from modules.load_data import load_books
from modules.process_preferences import process_user_preferences
from modules.recommendation import recommend_books
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.
books = load_books("data/books.json")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
st.title("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–Ω–∏–≥ üìö")
st.subheader("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.
if "recommendations" not in st.session_state:
    st.session_state["recommendations"] = None
if "selected_books" not in st.session_state:
    st.session_state["selected_books"] = []

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.
with st.form("preferences_form"):
    genres = st.text_input("–õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", value="")
    authors = st.text_input("–õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", value="")
    keywords = st.text_input("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", value="")
    min_year = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", min_value=0, value=1900)
    max_year = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", min_value=0, value=2024)
    strict_genres = st.checkbox("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∂–∞–Ω—Ä–∞–º")  # –ù–æ–≤—ã–π —á–µ–∫–±–æ–∫—Å
    sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:", ["–†–µ–π—Ç–∏–Ω–≥—É", "–ê–ª—Ñ–∞–≤–∏—Ç—É", "–ì–æ–¥—É –≤—ã–ø—É—Å–∫–∞"])
    submit_button = st.form_submit_button("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
if submit_button:
    preferences = process_user_preferences(
        genres.split(",") if genres else [],
        authors.split(",") if authors else [],
        keywords.split(",") if keywords else []
    )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    filters = {"year": {"min_year": min_year, "max_year": max_year}}

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
    sort_map = {"–†–µ–π—Ç–∏–Ω–≥—É": "score", "–ê–ª—Ñ–∞–≤–∏—Ç—É": "title", "–ì–æ–¥—É –≤—ã–ø—É—Å–∫–∞": "year"}
    sort_field = sort_map[sort_by]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    recommendations = recommend_books(books, preferences, filters=filters, sort_by=sort_field)

    if recommendations.empty:
        st.warning("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        st.session_state["recommendations"] = recommendations
        st.success("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É.
if st.session_state["recommendations"] is not None:
    recommendations = st.session_state["recommendations"].copy()

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞.
    recommendations["year"] = recommendations["year"].astype(int).astype(str)

    st.write("### –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
    st.dataframe(recommendations[['title', 'author', 'genre', 'year', 'score']])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    col1, col2 = st.columns(2)
    with col1:
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ CSV"):
            recommendations.to_csv("recommendations.csv", index=False, encoding="utf-8")
            st.success("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'recommendations.csv'.")
    with col2:
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ JSON"):
            recommendations_json = recommendations.to_dict(orient="records")
            with open("recommendations.json", "w", encoding="utf-8") as f:
                json.dump(recommendations_json, f, ensure_ascii=False, indent=4)
            st.success("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'recommendations.json'.")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥.
    st.write("### –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥–∏ –¥–ª—è '–°–ø–∏—Å–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å':")
    selected_books = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥–∏:",
        options=recommendations["title"].tolist(),
        default=st.session_state["selected_books"]
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    st.session_state["selected_books"] = selected_books

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–Ω–∏–≥–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
    if st.session_state["selected_books"]:
        reading_list = recommendations[recommendations["title"].isin(st.session_state["selected_books"])]

        st.write("### –í–∞—à '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞—Ç—å':")
        st.dataframe(reading_list[['title', 'author', 'genre', 'year']])

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.
        col1, col2 = st.columns(2)
        with col1:
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞—Ç—å' –≤ CSV"):
                reading_list.to_csv("reading_list.csv", index=False, encoding="utf-8")
                st.success("–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'reading_list.csv'.")
        with col2:
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞—Ç—å' –≤ JSON"):
                reading_list_json = reading_list.to_dict(orient="records")
                with open("reading_list.json", "w", encoding="utf-8") as f:
                    json.dump(reading_list_json, f, ensure_ascii=False, indent=4)
                st.success("–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'reading_list.json'.")
